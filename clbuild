#!/bin/bash
#
# Script to update/install the latest versions of all the most
# important Common Lisp projects. Uses SBCL but otherwise tries to be
# somewhat independent of your local environment.
#
# Intended to quickly bootstrap a working development environment for
# Lisp free software hackers.
#
# Idea from jhbuild by James Henstridge (a Gnome hacker).
#
# Contributors:
#   Luke Gorrie <luke@member.fsf.org>
#   Anthony Chaumas-Pellet <achaumas@wispery.info>
#   Christophe Rhodes <csr21@cantab.net>
#   David Lichteblau <david@lichteblau.com>
#   Eric Marsden <eric.marsden@free.fr>

set -e

all_projects="flexichain mcclim zip cxml closure gsharp climacs slime beirc
eclipse cl+ssl trivial-gray-streams usocket cl-irc cl-ppcre flexi-streams
cl-fad hunchentoot chunga url-rewrite cl-who cl-webdav clx cffi
bordeaux-threads climplayer closer-mop lw-compat skippy salza puri midi md5
cl-base64 spatial-trees trivial-sockets split-sequence rfc2388
graphic-forms closure-common closure-html cxml-rng cxml-stp drakma babel
alexandria trivial-features uffi clsql rt psgraph cl-pdf plexippus-xpath
cl-yacc parse-number cl-typesetting acl-compat mel-base clim-alerts
net-telent-date"

if [ "$CLNET_USER" == "" ]; then
    CLNET_USER=:pserver:anonymous:anonymous
fi
export CLNET_USER

self="$0"
while test -h "$self"; do
	self=`readlink "$self"`
done
BASE="$(cd "$(dirname $self)" && pwd)"
system_dir="$BASE/systems"
source_dir="$BASE/source"
target_dir="$BASE/target"

if test x`uname -o 2>/dev/null` = xCygwin; then
	windowsp=1
else
	windowsp=""
fi

source "$BASE/clbuild.conf.default"
if test -f "$BASE/clbuild.conf"; then
    source "$BASE/clbuild.conf"
fi
# Fix up pathnames
make_absolute_pn() {
	if [ -n "$1" ] ; then
		(cd "$BASE"
		echo "$(cd "$(dirname "$1")" ; pwd)/$(basename "$1")")
	fi
}
UPDATE_SCRIPT="$(make_absolute_pn "$UPDATE_SCRIPT")"
USER_INIT="$(make_absolute_pn "$USER_INIT")"

if test -n "$windowsp" -a x$USER_INIT = x/dev/null; then
	USER_INIT=NUL
fi

# CLIM configuration
case x$CLIM_BACKEND in
    xgraphic-forms)
        EXTRA_CLIM_FEATURES="(pushnew :clim-graphic-forms *features*)"
	maybe_load_clx="nil"
        ;;
    xgtkairo)
        EXTRA_CLIM_FEATURES="(pushnew :gtkairo *features*)"
	maybe_load_clx="nil"
        ;;
    x|xclx)
        EXTRA_CLIM_FEATURES="nil"
	maybe_load_clx="(unless (find-package :xlib) (asdf:operate 'asdf:load-op :clx))"
        ;;
    *)
        echo "invalid $CLIM_BACKEND, expected clx, gtkairo, or graphic-forms." 1>&2
        exit 1
        ;;
esac

if test -n "$windowsp"; then
	system_namestring="`cygpath -m $system_dir`/"
	source_namestring="`cygpath -m $source_dir`/"
	target_namestring="`cygpath -m $target_dir`/"
	self="c:/cygwin/bin/bash $self"
else
	system_namestring="$system_dir/"
	source_namestring="$source_dir/"
	target_namestring="$target_dir/"
fi
set_central_registry="(setq asdf:*central-registry* '(#p\"${system_namestring}\"))"

if [ ! -z $CCL ]; then
    #
    # OpenMCL
    #
    lisp=$CCL

    noinform="-Q"
    build_options="$noinform --batch" # fixme, that's not good enough
    end_toplevel_options="" #fixme
    run_options="--batch"   # ditto
    quit="(ccl:quit)"
    eval="--eval"
    require_asdf="(require :asdf)"
    save_lisp_and_die="ccl:save-application"

    if test x"$USER_INIT" = x/dev/null; then
	# -l /dev/null does not work
	common_options="-n"
    elif test -n "$USER_INIT"; then
	common_options="-n -l $USER_INIT"
    else
	common_options=""
    fi
elif [ ! -z $CLISP ]; then
    #
    # CLISP
    #
    echo '*** Using CLISP.  Please note that CLISP support is not complete.'
    lisp="$CLISP -repl"

    noinform="" #fixme
    build_options="-on-error exit $common_options"
    end_toplevel_options="" #fixme
    run_options="-on-error exit $common_options"
    quit="(ext:quit)"
    eval="-x"
    require_asdf="(load \"$BASE/source/asdf-for-clisp/asdf.lisp\")"
    save_lisp_and_die="error \"core files not supported for clisp\""

    if test -n "$USER_INIT"; then
	common_options="-norc -i $USER_INIT"
    else
	common_options=""
    fi

    if test -d "$BASE/source/asdf-for-clisp"; then
	echo "*** asdf checkout found"
	echo
    else
	echo "NEW checking out asdf for use with clisp"
	(cd "$BASE/source" && cvs -d :pserver:anonymous:@sbcl.cvs.sourceforge.net:/cvsroot/sbcl co -d asdf-for-clisp sbcl/contrib/asdf)
    fi
else
    #
    # SBCL
    #
    if [ ! -z "$SBCL" ]; then
	lisp=$SBCL
    elif [ -x ${target_dir}/bin/sbcl ]; then
	export SBCL_HOME=${target_namestring}lib/sbcl/
	lisp="${target_dir}/bin/sbcl"
	if ! test -f "$BASE"/monster.core; then
	    lisp="$lisp --core ${target_namestring}lib/sbcl/sbcl.core"
	fi
    else
	lisp=sbcl
    fi

    noinform="--noinform"
    end_toplevel_options="--end-toplevel-options"
    build_options="$noinform --noprint --disable-debugger $common_options"
    run_options="--disable-debugger $common_options"
    quit="(sb-ext:quit)"
    eval="--eval"
    require_asdf="(require :asdf)"
    save_lisp_and_die="sb-ext:save-lisp-and-die"

    if test -n "$USER_INIT"; then
	common_options="--userinit $USER_INIT"
    else
	common_options=""
    fi
fi

[ -d "$system_dir" ] || mkdir "$system_dir"
[ -d "$source_dir" ] || mkdir "$source_dir"
[ -d "$target_dir" ] || mkdir "$target_dir"

clbuild_lisp() {
    ${lisp} $common_options \
	$eval "$require_asdf" \
	$eval "$set_central_registry" \
	$eval "$EXTRA_CLIM_FEATURES" \
	"$@"
}

start_application() {
    if test -n "$end_toplevel_options"; then
	${lisp} \
	    $noinform \
	    $run_options \
	    $eval "$require_asdf" \
	    $eval "$set_central_registry" \
	    $eval "$EXTRA_CLIM_FEATURES" \
	    $eval "(load \"$BASE/clbuild.lisp\")" \
	    $end_toplevel_options \
	    "$@"
    else
        TMPDIR=`mktemp -d /tmp/clbuild.XXXXXXXXXX`
	export TMPDIR

        cleanup() {
            rm -rf $TMPDIR
        }
        trap cleanup exit

	while test -n "$1"; do
	    # fixme: whitespacea
	    echo $1 >>$TMPDIR/args
	    shift
	done

	${lisp} \
	    $noinform \
	    $run_options \
	    $eval "$require_asdf" \
	    $eval "$set_central_registry" \
	    $eval "$EXTRA_CLIM_FEATURES" \
	    $eval "(defparameter cl-user::*clbuild-args* \"$TMPDIR/args\")" \
	    $eval "(load \"$BASE/clbuild.lisp\")"
    fi
}

recompile() {
	rm -f "$BASE"/monster.core
	touch source/eclipse/config.lisp

        cmd="${1:-$quit}"
	${lisp} $build_options \
	    $eval "$require_asdf" \
	    $eval "$set_central_registry" \
            $eval "$EXTRA_CLIM_FEATURES" \
	    $eval "$maybe_load_clx" \
	    $eval "(asdf:oos 'asdf:load-op :mcclim)" \
	    $eval "(asdf:oos 'asdf:load-op :cl-ppcre)" \
	    $eval "(asdf:oos 'asdf:load-op :clim-listener)" \
	    $eval "(asdf:oos 'asdf:load-op :skippy)" \
	    $eval "(asdf:oos 'asdf:load-op :gsharp)" \
	    $eval "(asdf:oos 'asdf:load-op :clim-examples)" \
	    $eval "(asdf:oos 'asdf:load-op :closure)" \
	    $eval "(asdf:oos 'asdf:load-op :beirc)" \
	    $eval "(asdf:oos 'asdf:load-op :climacs)" \
	    $eval "(asdf:oos 'asdf:load-op :climplayer)" \
	    $eval "(asdf:oos 'asdf:load-op :hunchentoot-test)" \
	    $eval "(asdf:oos 'asdf:load-op :cl-webdav)" \
	    $eval "(asdf:oos 'asdf:load-op :cxml-rng)" \
	    $eval "(asdf:oos 'asdf:load-op :clim-alerts)" \
	    $eval "(asdf:oos 'asdf:load-op :eclipse)" \
	    $eval "(eclipse-system:compile-themes \"$BASE/source/eclipse/themes/microGUI/\" \"$BASE/source/eclipse/themes/Step/\" \"source/eclipse/themes/brushed-metal/\" \"source/eclipse/themes/CoolClean/\")" \
	    $eval "$cmd"
	echo "$0 ok"
}

count_systems() {
	n_asd=`ls -1 "$system_dir"/*.asd | wc -l`
	echo "$n_asd system definition files registered"
}

update() {
	rm -f "$BASE"/monster.core

        TMPDIR=`mktemp -d /tmp/clbuild.XXXXXXXXXX`
	export TMPDIR

        cleanup() {
            rm -rf $TMPDIR
        }
        trap cleanup exit

	cd "$source_dir"
	chmod +x ../update.sh

	projects="$all_projects"
	if test -n "$1"; then
	    case "$CLBUILD_DEPENDENCIES" in
		yes|ask)
		    if grep "^$1 " ../dependencies >/dev/null; then
			found=`grep "^$1 " ../dependencies`
			if test $CLBUILD_DEPENDENCIES = ask; then
			    echo "$1 depends on: $found"
			    echo -n "include dependencies in update? (Y/n)"
			    read reply
			    case _"$reply" in
				_Y|_y|_)
				    projects="$found"
				    ;;
				_n)
				    projects="$1"
				    ;;
				*)
				    echo Invalid reply
				    exit 1
				    ;;
			    esac
			else
			    projects="$found"
			fi
		    else
			echo "warning: no dependencies for $1 found" 1>&2
			projects="$1"
		    fi
		    ;;
		no)
		    projects="$1"
		    ;;
		*)
		    echo "error: invalid \$CLBUILD_DEPENDENCIES" 1>&2
		    exit 1
	    esac
	    rm -f "$1"/.clbuild-skip-update
	elif test -z "$clbuild_resume"; then
	    rm -f */.clbuild-skip-update
	fi

	for project in $projects; do
	    skipfile="$project"/.clbuild-skip-update
	    if test -f "$skipfile"; then
		echo "resume: skipping update of $project"
	    else
		${UPDATE_SCRIPT} ${UPDATE_ARGS} $project
		ln -f -s $(pwd)/${project}*/*.asd "${system_dir}"/
		touch "$skipfile"
	    fi
	done

	# some .asd files are hidden:
	ln -sf $(pwd)/eclipse/system.lisp ${system_dir}/eclipse.asd
	ln -f -s $(pwd)/graphic-forms/src/external-libraries/*/*/*.asd \
	    ${system_dir}

	echo "update complete"
	count_systems
        cd ..
}

help() {
	cat <<EOF
Short usage:

  update [PROJECT] download/update project or all projects
  buildsbcl        download/update and compile SBCL
  build            update, rebuild all applications, and dump a core file
  diff             show local changes (for all version-controlled projects)
  clean            delete all compiled object files
 
  slime            run the Superior Lisp Interaction Mode in a fresh Emacs
  lisp             run Lisp in the terminal
 
  listener         run the McCLIM listener
  hunchentoot      run the Hunchentoot web server test
 
  dialog           show an interactive menu - requires dialog(1)

See also:

  help             show complete usage information

EOF
}

long_help() {
	cat <<EOF
Usage:
  check         check availability of all necessary helper applications

  update [--dependencies|--no-dependencies] PROJECT_NAME
                download/update this project
  update [--resume]
                download/update all projects.  With --resume, consider
                only projects that a previous update run failed to fetch.
  skip PROJECT_NAME
                mark this project as done for the purposes of update --resume

  recompile     recompile all applications
  dumpcore      recompile and dump a core file for faster startup
  build         update && dumpcore

  diff          show local changes (for all version-controlled projects)
  check-urls    compared installed repository urls agains current locations
  clean-links   remove broken symlinks in systems/
  update-missing  download only projects not present yet

  buildsbcl [XC_HOST]  download/update and compile SBCL
  world         buildsbcl && build

  clean         delete all compiled object files
  mrproper      delete all downloaded source and fasl files

  slime         run the Superior Lisp Interaction Mode in a fresh Emacs
  lisp          run Lisp in the terminal
  sbcl          alias for "lisp" (with all systems available to REQUIRE)
  openmcl       alias for "lisp"

  listener      run the McCLIM listener
  gsharp        run the Gsharp score editor 
  climacs       run the Climacs text editor
  closure [HOME_PAGE_URL]   run the CLOSURE web browser
                (required Debian packages: gif2png,libjpeg-progs)
  beirc         run the Beirc IRC client
  climplayer    run the CLIMPlayer music player
                (required Debian packages: mplayer, fileschanged, fam)
  demodemo      run some random CLIM examples
  clim-alerts   run CLIM alerts
  eclipse [DPY] run the eclipse window manager

  hunchentoot   run the Hunchentoot web server test
  webdav DIR    run the CL-WEBDAV server, serving directory DIR
                (required Debian packages: libssl-dev)

  parse-xml FILENAME
                check XML for well-formedness
  validate-xml FILENAME
                check XML for validity
  validate-relax-ng [--compact yes] XML-FILENAME SCHEMA-FILENAME
                check XML for validity against a Relax NG Schema
  html-to-xhtml HTML-FILENAME OUTPUT-FILENAME
  xhtml-to-html XML-FILENAME OUTPUT-FILENAME
                convert between HTML 4 and XHTMl

  dialog        show an interactive menu 

Maintainance commands for developers:

  record-dependencies
                rebuild dependency information file

If you do 'world' or 'buildsbcl' then SBCL will be installed in
target/ and used for future commands. If you don't run these commands
(or you remove target/) then clbuild uses the 'sbcl' in your PATH.

For configuration options (including for non-SBCL lisps), see clbuild.conf.

EOF
}

check_program() {
    if ! "$1" --help >/dev/null; then
	echo Error: Cannot find a working installation of "$1"
	exit 1
    fi
    echo "found `which $1`"
}

# for programs that don't understand --help, or (like cvs) are stupid enough
# to return a failure code when invoked using a correct --help option... 
check_misdesigned_program() {
    if ! which "$1" >/dev/null; then
	echo Error: Cannot find a working installation of "$1"
	exit 1
    fi
    echo "found `which $1`"
}

interactive_menu() {
    if ! dialog --clear --title "clbuild" \
	--menu "Welcome to clbuild's interactive menu.\n\n\
If unsure, choose 'update' to download the userland, then try\n\
running one of applications." \
	0 0 0 \
	"update" "download/update all applications" \
	"recompile" "recompile all applications" \
	"dumpcore" "recompile and dump a core file for faster startup" \
	"" "" \
	"buildsbcl" "download/update and compile SBCL" \
	"world" "buildsbcl && update && dumpcore" \
	"" "" \
	"slime" "run the Superior Lisp Interaction Mode in a fresh Emacs" \
	"slime -nw" "run the Superior Lisp Interaction Mode (in this TTY)" \
	"lisp" "run Lisp in the terminal" \
	"" "" \
	"gsharp" "run the Gsharp score editor" \
	"climacs" "run the Climacs text editor" \
	"closure" "run the CLOSURE web browser" \
	"beirc" "run the Beirc IRC client" \
	"climplayer" "run the CLIMPlayer music player" \
	"demodemo" "run some random CLIM examples" \
	"hunchentoot" "run the Hunchentoot web server test" \
	"webdav" "run the CL-WEBDAV server" \
	"eclipse" "run the eclipse window manager" \
	"" "" \
	"clear" "Delete all fasls" \
	"mrproper" "Delete all downloaded source and fasls" \
	"" "" \
	"quit" "Exit clbuild" \
	2>$TMPDIR/choice
    then
	echo menu aborted
	exit 0
    fi
    choice="`cat $TMPDIR/choice`"
    case $choice in
	webdav)
	    if dialog --title "clbuild webdav" --clear --inputbox \
		"A WebDAV server will be started on http://localhost:4242.\n\n\
Files will be served for read and write operations without authentication.\n\n\
Please choose a directory to be exported." \
		16 72 /tmp 2>$TMPDIR/choice
	    then
		directory=`cat $TMPDIR/choice`
		if test -d $directory; then
		    choice="webdav $directory"
		else
		    $DIALOG --title "clbuild webdav" --clear \
			--msgbox "Error: Directory not found: $directory" \
			10 41
		    choice=""
		fi
	    else
		choice=""
	    fi
	    ;;
	eclipse)
	    if dialog --title "clbuild webdav" --clear --inputbox \
		"Please enter the X11 display to run eclipse on." \
		16 72 ${DISPLAY:-:0} 2>$TMPDIR/choice
	    then
		choice="eclipse `cat $TMPDIR/choice`"
	    else
		choice=""
	    fi
	    ;;
    esac
    case $choice in
	"")
	    ;;
	quit)
	    exit 0
	    ;;
	*)
	    echo
	    "$0" $choice || echo clbuild: $choice failed
	    echo
	    echo Type RET to continue
	    read
	    ;;
    esac
}

check() {
    echo "Checking for helper applications..."
    check_misdesigned_program cvs
    check_program svn
    check_program darcs
    check_program wget
    check_program tar
    check_misdesigned_program git
    check_misdesigned_program mktemp
    echo "Success: All helper applications found."
	
    echo
    echo "Checking Lisp startup..."
    if ${lisp} $run_options $eval $quit >/dev/null; then
	echo "Success: Lisp starts up using \"$lisp\""
    else
	echo "Error: Cannot run Lisp using \"$lisp\""
	exit 1
    fi

    echo
    echo "Looking for installable systems..."
    count_systems
}

dumpcore() {
    recompile "($save_lisp_and_die \"$BASE/monster.core\")" \
	&& echo "monster.core dumped"
}

if test -f "$BASE"/monster.core; then
    # echo "using `pwd`/monster.core"
    run_options="--core "$BASE"/monster.core $run_options"
fi

case $1 in
    check)
	check
	;;
    world)
	"$0" clean && "$0" buildsbcl && "$0" build
	;;
    clean)
	rm -f "$BASE"/monster.core
	cd $source_dir
	find . -name "*.fasl" -exec rm {} \;
	find . -name "*.lx64fsl" -exec rm {} \;
	;;
    mrproper)
	rm -rf "$BASE"/monster.core ${source_dir} ${target_dir}
	;;
    skip)
	touch "$source_dir/$2/.clbuild-skip-update"
	;;
    update)
	unset clbuild_resume
	while test -n "$2"; do
	    case "$2" in
		--no-dependencies)
		    CLBUILD_DEPENDENCIES="no"
		    shift
		    ;;
		--dependencies)
		    CLBUILD_DEPENDENCIES="yes"
		    shift
		    ;;
		--resume)
		    clbuild_resume="yes"
		    shift
		    ;;
		*)
		    break
		    ;;
	    esac
	done
	export clbuild_resume
	export CLBUILD_DEPENDENCIES
	update $2
	;;
    update-missing)
	for project in ${2:-$all_projects}; do
	    if ! test -d "${source_dir}/$project"; then
		update $project
	    fi
	done
	;;
    recompile)
	recompile
	;;
    build)
	update
	dumpcore
	;;
    dumpcore)
	dumpcore
	;;
    buildsbcl)
        if [ -n "$CCL" ]; then
            echo "Cowardly refusing to build SBCL when \$CCL is set." 1>&2
            exit 1
        fi
	cd ${source_dir}
	cvs -d :pserver:anonymous:@sbcl.cvs.sourceforge.net:/cvsroot/sbcl co sbcl
	# Enable threads
	if test -z "$windowsp"; then
	    echo '(lambda (list) (pushnew :sb-thread list) list)' > sbcl/customize-target-features.lisp
	fi
	(cd sbcl; sh make.sh "$2"; SBCL_HOME= INSTALL_ROOT=${target_dir} sh install.sh)
	;;
    lisp)
	shift;
        clbuild_lisp "$@"
        ;;
    sbcl)
        if [ -n "$CCL" ]; then
            echo "Cowardly refusing to run SBCL when \$CCL is set." 1>&2
            exit 1
        fi
	shift;
        clbuild_lisp "$@"
	;;
    openmcl)
        if [ -z "$CCL" ]; then
            echo "Cannot run OpenMCL because \$CCL is not set." 1>&2
            exit 1
        fi
	shift;
        clbuild_lisp "$@"
	;;
    slime)
	shift
	emacs_args="$@"
	emacs=${EMACS-emacs}
	$emacs \
	    -eval "(setq load-path (cons \"${source_namestring}slime\" load-path))" \
	    -eval "(setq load-path (cons \"${source_namestring}slime/contrib\" load-path))" \
	    -eval "(setq inhibit-splash-screen t)" \
	    -eval "(load \"${source_namestring}slime/slime\")" \
	    -eval "(setq inferior-lisp-program \"$self lisp\")" \
	    -eval "(setq slime-use-autodoc-mode nil)" \
            -eval "(slime-setup '(slime-fancy slime-tramp slime-asdf))" \
	    -eval '(slime)' \
	    ${emacs_args}
	;;
    listener|gsharp|demodemo|climacs|closure|beirc|parse-xml|validate-xml|validate-relax-ng|html-to-xhtml|xhtml-to-html|clim-alerts)
	start_application "$@"
	;;
    record-dependencies)
	cd "$BASE"
	start_application record-dependencies "$all_projects"
	;;
    climplayer)
	check_program fileschanged
	check_misdesigned_program mplayer
	start_application "$@"
	;;
    hunchentoot)
	if ! test -f /usr/lib/libssl.so; then
	    echo "WARNING: /usr/lib/libssl.so not found, did you install OpenSSL?"
	    echo "(type RET to continue anyway)"
	    read
	fi
	start_application "$@"
	;;
    webdav)
	if ! test -f /usr/lib/libssl.so; then
	    echo "WARNING: /usr/lib/libssl.so not found, did you install OpenSSL?"
	    echo "(type RET to continue anyway)"
	    read
	fi
	start_application "$@"
	;;
    eclipse)
	touch source/eclipse/config.lisp
	# zzz cl-user::*eclipse-initfile*?!
	# zzz cl-user::*eclipse-eclipsedir*?!
	start_application "$@"
	;;
    check-urls)
	cd "$source_dir"
	chmod +x ../update.sh
	for project in ${2:-$all_projects}; do
	    ${UPDATE_SCRIPT} --dry-run $project
	done
	;;
    clean-links)
	cd "$system_dir"
	for f in *; do
	    if test -h "$f"; then
		link_target=`readlink "$f"`
		if ! test -e "$link_target"; then
		    echo "removing broken link from $f to $link_target"
		    rm "$f"
		fi
	    fi
	done
	;;
    diff)
	diff="${source_dir}/.diff"
	cp /dev/null "$diff"
	cd "${source_dir}"
	darcs diff -u >>"$diff"
	set +e
	for f in *; do
	    g="${source_dir}/$f"
	    if test -d "$g"; then
		cd "$g"
		echo -n diffing $f... 1>&2
		if test -d CVS; then
		    cvs diff -u 2>/dev/null | grep -v '^?' >>"$diff"
		elif test -d .svn; then
		    svn diff >>"$diff"
		elif test -d '{arch}'; then
		    baz diff >>"$diff"
		elif test -d _darcs; then
		    darcs diff -u >>"$diff"
		elif test -d .git; then
		    git diff >>"$diff"
		else
		    echo -n " FAILED" 1>&2
		fi
		echo 1>&2
	    fi
	done
	less "$diff"
	;;
    help|--long-help|-H)
        long_help
	;;
    ""|--help|-h)
	help
	;;
    dialog)
        if ! dialog --help >/dev/null; then
	    cat <<EOF

error: dialog(1) not found.  Cannot start interactive menu.
Install dialog or try clbuild --help instead.
EOF
	    exit 1
	fi

	# always run check first to avoid unpleasant surprises
	check


        TMPDIR=`mktemp -d /tmp/clbuild.XXXXXXXXXX`

        cleanup() {
            rm -rf $TMPDIR
        }
        trap cleanup exit

	while :; do
	    interactive_menu
	done
	;;
    *)
        help
	exit 1
esac

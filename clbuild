#!/bin/bash
#
# Script to update/install the latest versions of all the most
# important Common Lisp packages. Uses SBCL but otherwise tries to be
# somewhat independent of your local environment.
#
# Intended to quickly bootstrap a working development environment for
# Lisp free software hackers.
#
# Idea from jhbuild by James Henstridge (a Gnome hacker).
#
# Contributors:
#   Luke Gorrie <luke@member.fsf.org>
#   Anthony Chaumas-Pellet <achaumas@wispery.info>
#   Christophe Rhodes <csr21@cantab.net>
#   David Lichteblau <david@lichteblau.com>
#   Eric Marsden <eric.marsden@free.fr>

set -e
if [ "$CLNET_USER" == "" ]; then
    CLNET_USER=:pserver:anonymous:anonymous
fi

cd $(dirname $0)
system_dir="$(pwd)/systems"
source_dir="$(pwd)/source"
target_dir="$(pwd)/target"
self="`readlink -f $0`"

# SBCL-specific options
build_options="--noinform --noprint --disable-debugger"
run_options="--disable-debugger"
quit="(sb-ext:quit)"

source clbuild.conf

# CLIM configuration
case x$CLIM_BACKEND in
    xgraphic-forms)
        EXTRA_CLIM_FEATURES="(pushnew :clim-graphic-forms *features*)"
        ;;
    xgtkairo)
        EXTRA_CLIM_FEATURES="(pushnew :gtkairo *features*)"
        ;;
    x|xclx)
        EXTRA_CLIM_FEATURES="nil"
        ;;
    *)
        echo "invalid $CLIM_BACKEND, expected clx, gtkairo, or graphic-forms." 1>&2
        exit 1
        ;;
esac

if test x`uname -o` = xCygwin; then
        # need to translate cygwin's system_dir into a real Windows namestring
        # for use with SBCL below
	echo Cygwin detected, computing Windows pathname...
	# preliminary sbcl command line, gets reset later
	if test -x target/bin/sbcl; then
	    lisp="target/bin/sbcl --core target/lib/sbcl/sbcl.core"
	else
	    lisp=sbcl
	fi
	$lisp --noinform --no-userinit --nosysinit >/dev/null 2>&1 <<eof
(with-open-file (s "cygwin.tmp"
                 :direction :output
                 :if-exists :rename-and-delete
                 :if-does-not-exist :create)
  (write-string
    (substitute #\\/ #\\\\ (namestring *default-pathname-defaults*))
    s))
eof
	system_namestring="`cat cygwin.tmp`systems/"
	source_namestring="`cat cygwin.tmp`source/"
	target_namestring="`cat cygwin.tmp`target/"
	self="c:/cygwin/bin/bash $self"
	windowsp=windowsp
	echo "done -- systems located in $system_namestring"
else
	system_namestring="$system_dir/"
	source_namestring="$source_dir/"
	target_namestring="$target_dir/"
	unset windowsp
fi
set_central_registry="(setq asdf:*central-registry* '(#p\"${system_namestring}\"))"

if [ ! -z $CCL ]; then
    # user wants OpenMCL instead of SBCL.  Make it so.
    lisp=$CCL
    build_options="--batch" # fixme, that's not good enough
    run_options="--batch"   # ditto
    quit="(ccl:quit)"
elif [ ! -z $SBCL ]; then
    lisp=$SBCL
elif [ -x ${target_dir}/bin/sbcl ]; then
    export SBCL_HOME=${target_namestring}lib/sbcl/
    lisp="${target_dir}/bin/sbcl --core ${target_namestring}lib/sbcl/sbcl.core"
else
    lisp=sbcl
fi

[ -d $system_dir ] || mkdir $system_dir
[ -d $source_dir ] || mkdir $source_dir
[ -d $target_dir ] || mkdir $target_dir


blank_line="                                                                  "
tail_last() {
    if tty 0>&1 >/dev/null; then
	while read line; do
	    echo -e '\r\c'
	    echo -n "$blank_line"
	    echo -e '\r\c'
	    echo -n $line | cut -b 1-65 | tr -d '\n'
	done
	echo -e '\r\c'
	echo -n "$blank_line"
	echo -e '\r\c'
    else
	while read line; do
	    echo $line
	done
    fi
}

clbuild_lisp() {
    ${lisp} \
	--eval "(require :asdf)" \
	--eval "$set_central_registry" \
	--eval "$EXTRA_CLIM_FEATURES" \
	"$@"
}

get_darcs() {
    name="$1"
    url="$2"

    # don't use tail_last, since darcs already has this kind of progress bar
    if [ -d $name ]; then
	echo "darcs pull $name..."
	(cd $name; darcs pull --all)
    else
	echo "darcs get $name..."
	darcs get $url $name
    fi
    ln -f -s $(pwd)/$name/*.asd ${system_dir}
}

get_svn() {
    name="$1"
    url="$2"

    echo "svn co $name..."

    svn co $url $name | tail_last
    ln -f -s $(pwd)/$name/*.asd ${system_dir}/
}

get_cvs() {
    module="$1"
    repository="$2"

    echo "cvs co $module..."

    cvs -d $repository co $module | tail_last
    ln -f -s $(pwd)/$module/*.asd ${system_dir}/
}

# zzz I don't like the way the existing directory is removed completely.
get_tarball() {
    name="$1"
    url="$2"
    flags="${3:-z}"

    tmp=$TMPDIR/${name}.tar.gz

    echo "wget $name..."

    [ -d ${name}*/ ] && rm -rf ${name}*/
    wget \
	--no-check-certificate \
	--progress=dot \
	-O "$tmp" \
	$url \
	2>&1 | tail_last
    tar v${flags}xf "$tmp" | tail_last
    rm "$tmp"
    ln -f -s $(pwd)/${name}*/*.asd ${system_dir}/
}

get_svn_clnet() {
    name="$1"
    path="$2"

    get_svn $name svn://common-lisp.net/project/$name/svn/$2
}

get_cvs_clnet() {
    module="$1"
    project="${2:-$1}"

    get_cvs $module ${CLNET_USER}@common-lisp.net:/project/$project/cvsroot
}

get_ediware() {
    name="$1"

    get_tarball $name http://weitz.de/files/${name}.tar.gz
}

get_tarball_bz2() {
    get_tarball "$1" "$2" j
}

recompile() {
	${lisp} $build_options \
	    --eval "(require :asdf)" \
	    --eval "$set_central_registry" \
            --eval "$EXTRA_CLIM_FEATURES" \
	    --eval "(asdf:oos 'asdf:load-op :mcclim)" \
	    --eval "(asdf:oos 'asdf:load-op :cl-ppcre)" \
	    --eval "(asdf:oos 'asdf:load-op :clim-listener)" \
	    --eval "(asdf:oos 'asdf:load-op :skippy)" \
	    --eval "(asdf:oos 'asdf:load-op :gsharp)" \
	    --eval "(asdf:oos 'asdf:load-op :closure)" \
	    --eval "(asdf:oos 'asdf:load-op :beirc)" \
	    --eval "(asdf:oos 'asdf:load-op :climacs)" \
	    --eval "(asdf:oos 'asdf:load-op :climplayer)" \
	    --eval $quit
	echo "$0 ok"
}

count_systems() {
	n_asd=`ls -1 $system_dir/*.asd | wc -l`
	echo "$n_asd systems definition files registered"
}

update() {
        TMPDIR=`mktemp -d /tmp/clbuild.XXXXXXXXXX`

        cleanup() {
            rm -rf $TMPDIR
        }
        trap cleanup exit

	cd $source_dir
	source ../update.sh

	echo "update complete"
	count_systems
}

help() {
	cat <<EOF
Usage:
  check         check availability of all necessary helper applications

  update        download/update all applications
  recompile     recompile all applications
  build         update && recompile

  buildsbcl     download/update and compile SBCL
  world         buildsbcl && build

  clean         delete all compiled object files
  mrproper      delete all downloaded source and fasl files

  slime         run the Superior Lisp Interaction Mode in a fresh Emacs
  lisp          run Lisp in the terminal
  sbcl          alias for "lisp" (with all packages available to REQUIRE)
  openmcl       alias for "lisp"

  listener      run the McCLIM listener
  gsharp        run the Gsharp score editor 
  climacs       run the Climacs text editor
  closure       run the CLOSURE web browser
                (required Debian packages: gif2png,libjpeg-progs)
  beirc         run the Beirc IRC client
  climplayer    run the CLIMPlayer music player
                (required Debian packages: mplayer, fileschanged, fam)

  dialog        show an interactive menu 

Default when started without arguments is 'dialog'.

If you do 'world' or 'buildsbcl' then SBCL will be installed in
target/ and used for future commands. If you don't run these commands
(or you remove target/) then clbuild uses the 'sbcl' in your PATH.

Set CCL to your OpenMCL binary to use OpenMCL instead of SBCL. 
Example: CCL=~/ccl/lx86cl64 ./clbuild build
(Not supported with targets 'buildsbcl' and 'sbcl'.)

Set CLIM_BACKEND=gtkairo to enable clim-gtkairo instead of clim-clx.
(Requires GTK+ >= 2.8.)

EOF
}

check_program() {
    if ! "$1" --help >/dev/null; then
	echo Error: Cannot find a working installation of "$1"
	exit 1
    fi
    echo "found `which $1`"
}

# for programs that don't understand --help, or (like cvs) are stupid enough
# to return a failure code when invoked using a correct --help option... 
check_misdesigned_program() {
    if ! which "$1" >/dev/null; then
	echo Error: Cannot find a working installation of "$1"
	exit 1
    fi
    echo "found `which $1`"
}

start_clim() {
    system=$1
    cmd="$2"

    ${lisp} $run_options \
	--eval "(require :asdf)" \
	--eval "$set_central_registry" \
	--eval "$EXTRA_CLIM_FEATURES" \
	--eval "(asdf:operate 'asdf:load-op :mcclim)" \
	--eval "(asdf:operate 'asdf:load-op $system)" \
	--eval "$cmd" \
	--eval "$quit"
}

interactive_menu() {
    if ! dialog --clear --title "clbuild" \
	--menu "Welcome to clbuild's interactive menu.\n\n\
If unsure, choose 'update' to download the userland, then try\n\
running one of applications." \
	24 74 14 \
	"update" "download/update all applications" \
	"recompile" "recompile all applications" \
	"" "" \
	"buildsbcl" "download/update and compile SBCL" \
	"world" "buildsbcl && update && recompile" \
	"" "" \
	"slime" "run the Superior Lisp Interaction Mode in a fresh Emacs" \
	"slime -nw" "run the Superior Lisp Interaction Mode (in this TTY)" \
	"lisp" "run Lisp in the terminal" \
	"" "" \
	"gsharp" "run the Gsharp score editor" \
	"climacs" "run the Climacs text editor" \
	"closure" "run the CLOSURE web browser" \
	"beirc" "run the Beirc IRC client" \
	"climplayer" "run the CLIMPlayer music player" \
	"" "" \
	"clear" "Delete all fasls" \
	"mrproper" "Delete all downloaded source and fasls" \
	"" "" \
	"quit" "Exit clbuild" \
	2>$TMPDIR/choice
    then
	echo menu aborted
	exit 0
    fi
    choice="`cat $TMPDIR/choice`"
    case $choice in
	"")
	    ;;
	quit)
	    exit 0
	    ;;
	*)
	    echo
	    "$0" $choice || echo clbuild: $choice failed
	    echo
	    echo Type RET to continue
	    read
	    ;;
    esac
}

check() {
    echo "Checking for helper applications..."
    check_misdesigned_program cvs
    check_program svn
    check_program darcs
    check_program wget
    check_program tar
    check_misdesigned_program mktemp
    echo "Success: All helper applications found."
	
    echo
    echo "Checking Lisp startup..."
    if ${lisp} --eval $quit >/dev/null; then
	echo "Success: Lisp starts up using \"$lisp\""
    else
	echo "Error: Cannot run Lisp using \"$lisp\""
	exit 1
    fi

    echo
    echo "Looking for installable systems..."
    count_systems
}

case $1 in
    check)
	check
	;;
    world)
	"$0" clean && "$0" buildsbcl && "$0" build
	;;
    clean)
	cd $source_dir
	find . -name "*.fasl" -exec rm {} \;
	find . -name "*.lx64fsl" -exec rm {} \;
	;;
    mrproper)
	rm -rf ${source_dir} ${target_dir}
	;;
    update)
	update
	;;
    recompile)
	recompile
	;;
    build)
	update
	recompile
	;;
    buildsbcl)
        if [ -n "$CCL" ]; then
            echo "Cowardly refusing to build SBCL when \$CCL is set." 1>&2
            exit 1
        fi
	cd ${source_dir}
	cvs -d :pserver:anonymous:@sbcl.cvs.sourceforge.net:/cvsroot/sbcl co sbcl
	# Enable threads
	if test -z "$windowsp"; then
	    echo '(lambda (list) (pushnew :sb-thread list) list)' > sbcl/customize-target-features.lisp
	fi
	(cd sbcl; sh make.sh; SBCL_HOME= INSTALL_ROOT=${target_dir} sh install.sh)
	;;
    lisp)
	shift;
        clbuild_lisp "$@"
        ;;
    sbcl)
        if [ -n "$CCL" ]; then
            echo "Cowardly refusing to run SBCL when \$CCL is set." 1>&2
            exit 1
        fi
	shift;
        clbuild_lisp "$@"
	;;
    openmcl)
        if [ -z "$CCL" ]; then
            echo "Cannot run OpenMCL because \$CCL is not set." 1>&2
            exit 1
        fi
	shift;
        clbuild_lisp "$@"
	;;
    slime)
	shift
	emacs_args="$@"
	emacs=${EMACS-emacs}
	$emacs \
	    -eval "(setq load-path (cons \"${source_namestring}slime\" load-path))" \
	    -eval "(setq inhibit-splash-screen t)" \
	    -eval "(load \"${source_namestring}slime/slime\")" \
	    -eval "(setq inferior-lisp-program \"$self lisp\")" \
	    -eval "(slime-setup)" \
	    -eval '(slime)' \
	    ${emacs_args}
	;;
    listener)
	start_clim :clim-listener "(clim-listener:run-listener)"
	;;
    gsharp)
	start_clim :gsharp "(gsharp::gsharp)"
	;;
    climacs)
	start_clim :climacs "(climacs:climacs)"
	;;
    closure)
	start_clim :closure "(clim-user::run-closure :new-process nil)"
	;;
    beirc)
	start_clim :beirc "(beirc:beirc :new-process nil)"
	;;
    climplayer)
	check_program fileschanged
	check_misdesigned_program mplayer
	start_clim :climplayer "(climplayer:climplayer)"
	;;
    help|--help|-h|-H)
        help
	;;
    ""|dialog)
        if ! dialog --help >/dev/null; then
	    cat <<EOF

error: dialog(1) not found.  Cannot start interactive menu.
Install dialog or try clbuild --help instead.
EOF
	    exit 1
	fi

	# always run check first to avoid unpleasant surprises
	check


        TMPDIR=`mktemp -d /tmp/clbuild.XXXXXXXXXX`

        cleanup() {
            rm -rf $TMPDIR
        }
        trap cleanup exit

	while :; do
	    interactive_menu
	done
	;;
    *)
        help
	exit 1
esac

#!/bin/bash
#
# Script to update/install the latest versions of all the most
# important Common Lisp packages. Uses SBCL but otherwise tries to be
# somewhat independent of your local environment.
#
# Intended to quickly bootstrap a working development environment for
# Lisp free software hackers.
#
# Idea from jhbuild by James Henstridge (a Gnome hacker).
#
# Contributors:
#   Luke Gorrie <luke@member.fsf.org>
#   Anthony Chaumas-Pellet <achaumas@wispery.info>
#   Christophe Rhodes <csr21@cantab.net>
#   David Lichteblau <david@lichteblau.com>
#   Eric Marsden <eric.marsden@free.fr>

set -e
if [ "$CLNET_USER" == "" ]; then
    CLNET_USER=:pserver:anonymous:anonymous
fi

cd $(dirname $0)
system_dir="$(pwd)/systems"
source_dir="$(pwd)/source"
target_dir="$(pwd)/target"
self="`readlink -f $0`"

# SBCL-specific options
build_options="--noinform --noprint --disable-debugger"
run_options="--disable-debugger"
quit="(sb-ext:quit)"

# CLIM configuration
case x$CLIM_BACKEND in
    xgraphic-forms)
        EXTRA_CLIM_FEATURES="(pushnew :clim-graphic-forms *features*)"
        ;;
    xgtkairo)
        EXTRA_CLIM_FEATURES="(pushnew :gtkairo *features*)"
        ;;
    x|xclx)
        EXTRA_CLIM_FEATURES="nil"
        ;;
    *)
        echo "invalid $CLIM_BACKEND, expected clx, gtkairo, or graphic-forms." 1>&2
        exit 1
        ;;
esac

if test x`uname -o` = xCygwin; then
        # need to translate cygwin's system_dir into a real Windows namestring
        # for use with SBCL below
	echo Cygwin detected, computing Windows pathname...
	# preliminary sbcl command line, gets reset later
	if test -x target/bin/sbcl; then
	    lisp="target/bin/sbcl --core target/lib/sbcl/sbcl.core"
	else
	    lisp=sbcl
	fi
	$lisp --noinform --no-userinit --nosysinit >/dev/null 2>&1 <<eof
(with-open-file (s "cygwin.tmp"
                 :direction :output
                 :if-exists :rename-and-delete
                 :if-does-not-exist :create)
  (write-string
    (substitute #\\/ #\\\\ (namestring *default-pathname-defaults*))
    s))
eof
	system_namestring="`cat cygwin.tmp`systems/"
	source_namestring="`cat cygwin.tmp`source/"
	target_namestring="`cat cygwin.tmp`target/"
	self="c:/cygwin/bin/bash $self"
	windowsp=windowsp
	echo "done -- systems located in $system_namestring"
else
	system_namestring="$system_dir/"
	source_namestring="$source_dir/"
	target_namestring="$target_dir/"
	unset windowsp
fi
set_central_registry="(setq asdf:*central-registry* '(#p\"${system_namestring}\"))"

if [ ! -z $CCL ]; then
    # user wants OpenMCL instead of SBCL.  Make it so.
    lisp=$CCL
    build_options="--batch" # fixme, that's not good enough
    run_options="--batch"   # ditto
    quit="(ccl:quit)"
elif [ ! -z $SBCL ]; then
    lisp=$SBCL
elif [ -x ${target_dir}/bin/sbcl ]; then
    export SBCL_HOME=${target_namestring}lib/sbcl/
    lisp="${target_dir}/bin/sbcl --core ${target_namestring}lib/sbcl/sbcl.core"
else
    lisp=sbcl
fi

[ -d $system_dir ] || mkdir $system_dir
[ -d $source_dir ] || mkdir $source_dir
[ -d $target_dir ] || mkdir $target_dir

clbuild_lisp() {
    ${lisp} \
	--eval "(require :asdf)" \
	--eval "$set_central_registry" \
	--eval "$EXTRA_CLIM_FEATURES" \
	"$@"
}

get_darcs() {
    name="$1"
    url="$2"
    if [ -d $name ]; then
	(cd $name; darcs pull --all)
    else
	darcs get $url $name
    fi
    ln -f -s $(pwd)/$name/*.asd ${system_dir}
}

get_svn() {
    name="$1"
    url="$2"
    svn co $url $name
    ln -f -s $(pwd)/$name/*.asd ${system_dir}/
}

case $1 in
    world)
	"$0" clean && "$0" buildsbcl && "$0" build
	;;
    clean)
	cd $source_dir
	find . -name "*.fasl" -exec rm {} \;
	find . -name "*.lx64fsl" -exec rm {} \;
	;;
    mrproper)
	rm -rf ${source_dir} ${target_dir}
	;;
    build)
        TMPDIR=`mktemp -d /tmp/clbuild.XXXXXXXXXX`

        cleanup() {
            rm -rf $TMPDIR
        }
        trap cleanup exit

	cd $source_dir
        # flexichain
	cvs -d ${CLNET_USER}@common-lisp.net:/project/flexichain/cvsroot co flexichain
	ln -f -s $(pwd)/flexichain/*.asd ${system_dir}/
	
        # mcclim
	cvs -d ${CLNET_USER}@common-lisp.net:/project/mcclim/cvsroot co mcclim
	ln -f -s $(pwd)/mcclim/*.asd ${system_dir}/
	
        # spatial trees (does not exist in CVS so redownload each time)
	[ -d spatial-trees*/ ] && rm -rf spatial-trees*/
	wget -O $TMPDIR/spatial-trees.tar.gz http://ftp.linux.org.uk/pub/lisp/cclan/spatial-trees.tar.gz
	tar vzxf $TMPDIR/spatial-trees.tar.gz
	rm $TMPDIR/spatial-trees.tar.gz
	ln -f -s $(pwd)/spatial-trees*/*.asd ${system_dir}/

        # CLX (update or checkout - I'm not good with darcs)
	if [ -d clx ]; then
	    (cd clx; darcs pull --all)
	else
	    darcs get http://common-lisp.net/~crhodes/clx
	fi
	ln -f -s $(pwd)/clx/*.asd ${system_dir}/

	# CL-PPCRE
	wget -O $TMPDIR/cl-ppcre.tar.gz http://weitz.de/files/cl-ppcre.tar.gz
	tar vzxf $TMPDIR/cl-ppcre.tar.gz
	rm $TMPDIR/cl-ppcre.tar.gz
	ln -f -s $(pwd)/cl-ppcre*/*.asd ${system_dir}/

	# Skippy (required by closure)
	[ -d skippy* ] && rm -rf skippy*/
	wget -O $TMPDIR/skippy.tgz http://www.xach.com/lisp/skippy.tgz
	tar vzxf $TMPDIR/skippy.tgz
	rm $TMPDIR/skippy.tgz
	ln -f -s $(pwd)/skippy*/*.asd ${system_dir}/

	# FLEXI-STREAMS (for CLOSURE)
	wget -O $TMPDIR/flexi-streams.tar.gz http://weitz.de/files/flexi-streams.tar.gz
	tar vzxf $TMPDIR/flexi-streams.tar.gz
	rm $TMPDIR/flexi-streams.tar.gz
	ln -f -s $(pwd)/flexi-streams*/*.asd ${system_dir}/

	# TRIVIAL-GRAY-STREAMS (for CLOSURE)
	wget -O $TMPDIR/trivial-gray-streams.tar.gz http://common-lisp.net/project/cl-plus-ssl/download/trivial-gray-streams.tar.gz
	tar vzxf $TMPDIR/trivial-gray-streams.tar.gz
	rm $TMPDIR/trivial-gray-streams.tar.gz
	ln -f -s $(pwd)/trivial-gray-streams*/*.asd ${system_dir}/

	# ZIP (for CLOSURE)
	cvs -d ${CLNET_USER}@common-lisp.net:/project/zip/cvsroot co zip
	ln -f -s $(pwd)/zip/*.asd ${system_dir}/

	# SALZA (for CLOSURE)
	wget -O $TMPDIR/salza.tar.gz http://www.xach.com/lisp/salza/salza-0.7.2.tar.gz
	tar vzxf $TMPDIR/salza.tar.gz
	rm $TMPDIR/salza.tar.gz
	ln -f -s $(pwd)/salza*/*.asd ${system_dir}/

	# TRIVIAL-SOCKETS (for CLOSURE)
	wget -O $TMPDIR/trivial-sockets.tar.gz http://ftp.linux.org.uk/pub/lisp/cclan/trivial-sockets.tar.gz
	tar vzxf $TMPDIR/trivial-sockets.tar.gz
	rm $TMPDIR/trivial-sockets.tar.gz
	ln -f -s $(pwd)/trivial-sockets*/*.asd ${system_dir}/

	# BORDEAUX-THREADS (for CLOSURE)
	if [ -d bordeaux-threads ]; then
	    (cd bordeaux-threads; darcs pull --all)
	else
	    darcs get http://common-lisp.net/project/bordeaux-threads/darcs/bordeaux-threads/
	fi
	ln -f -s $(pwd)/bordeaux-threads/*.asd ${system_dir}/

	# CXML (for CLOSURE)
	cvs -d ${CLNET_USER}@common-lisp.net:/project/cxml/cvsroot co cxml
	ln -f -s $(pwd)/cxml/*.asd ${system_dir}/
	
	# PURI (for CLOSURE)
	wget -O $TMPDIR/puri.tar.gz http://files.b9.com/puri/puri-latest.tar.gz
	tar vzxf $TMPDIR/puri.tar.gz
	rm $TMPDIR/puri.tar.gz
	ln -f -s $(pwd)/puri*/*.asd ${system_dir}/

	# CLOSURE
	cvs -d ${CLNET_USER}@common-lisp.net:/project/closure/cvsroot co closure
	ln -f -s $(pwd)/closure/*.asd ${system_dir}/

        # MIDI (for GSHARP)
	[ -d midi*/ ] && rm -rf midi*/
	wget -O $TMPDIR/midi.tar.gz http://doc.gold.ac.uk/isms/lisp/midi/midi.tar.gz
	tar vzxf $TMPDIR/midi.tar.gz
	rm $TMPDIR/midi.tar.gz
	ln -f -s $(pwd)/midi*/*.asd ${system_dir}/

	# GSHARP
	cvs -d ${CLNET_USER}@common-lisp.net:/project/gsharp/cvsroot co gsharp
	ln -f -s $(pwd)/gsharp/*.asd ${system_dir}/

	# Climacs
	cvs -d ${CLNET_USER}@common-lisp.net:/project/climacs/cvsroot co climac\s
	ln -f -s $(pwd)/climacs/*.asd ${system_dir}

	# slime
	cvs -d ${CLNET_USER}@common-lisp.net:/project/slime/cvsroot co slime

	# tab-layout (for Beirc)
	wget -O $TMPDIR/tab-layout.tar.bz2 --no-check-certificate http://bl0rg.net/~mgr/flux/tab-layout_2005-09-19_02-52+0200.tar.bz2
	tar vjxf $TMPDIR/tab-layout.tar.bz2
	rm $TMPDIR/tab-layout.tar.bz2
	ln -f -s $(pwd)/tab-layout/*.asd ${system_dir}/

	# split-sequence (for Beirc; does not go through the CCLAN mirror selector because of cookies)
	wget -O $TMPDIR/split-sequence.tar.gz http://ftp.linux.org.uk/pub/lisp/cclan/split-sequence.tar.gz
	tar vzxf $TMPDIR/split-sequence.tar.gz
	rm $TMPDIR/split-sequence.tar.gz
	ln -f -s $(pwd)/split-sequence/*.asd ${system_dir}/

	# cl-fad (for Beirc)
	wget -O $TMPDIR/cl-fad.tar.gz http://weitz.de/files/cl-fad.tar.gz
	tar vzxf $TMPDIR/cl-fad.tar.gz
	rm $TMPDIR/cl-fad.tar.gz
	ln -f -s $(pwd)/cl-fad*/*.asd ${system_dir}/

	# usocket (for Beirc)
	svn co svn://common-lisp.net/project/usocket/svn/usocket/trunk/ usocket/
	ln -f -s $(pwd)/usocket/*.asd ${system_dir}/

	# cl-irc (for Beirc)
	svn co svn://common-lisp.net/project/cl-irc/svn/trunk/ cl-irc/
	ln -f -s $(pwd)/cl-irc/*.asd ${system_dir}

	# Beirc
	cvs -d ${CLNET_USER}@common-lisp.net:/project/beirc/cvsroot co beirc
	ln -f -s $(pwd)/beirc/*.asd ${system_dir}

        # CLIMPlayer
	if [ -d climplayer ]; then
	    (cd climplayer; darcs pull --all)
	else
	    darcs get http://common-lisp.net/project/climplayer/darcs/climplayer
	fi
	ln -f -s $(pwd)/climplayer/*.asd ${system_dir}/

	# cffi (for gtkairo)
#	get_darcs cffi http://common-lisp.net/project/cffi/darcs/cffi/
	get_darcs cffi http://common-lisp.net/~loliveira/darcs/cffi-newtypes/

	# graphic-forms
	get_svn graphic-forms/ \
	    svn://common-lisp.net/project/graphic-forms/svn/trunk/
	# some .asd files are hidden:
	ln -f -s $(pwd)/graphic-forms/src/external-libraries/*/*/*.asd ${system_dir}

	# closer-* (for graphic-forms)
	get_darcs closer-mop \
	    http://common-lisp.net/project/closer/repos/closer-mop/
	get_darcs lw-compat \
	    http://common-lisp.net/project/closer/repos/lw-compat/

	${lisp} $build_options \
	    --eval "(require :asdf)" \
	    --eval "$set_central_registry" \
            --eval "$EXTRA_CLIM_FEATURES" \
	    --eval "(asdf:oos 'asdf:load-op :mcclim)" \
	    --eval "(asdf:oos 'asdf:load-op :cl-ppcre)" \
	    --eval "(asdf:oos 'asdf:load-op :clim-listener)" \
	    --eval "(asdf:oos 'asdf:load-op :skippy)" \
	    --eval "(asdf:oos 'asdf:load-op :gsharp)" \
	    --eval "(asdf:oos 'asdf:load-op :closure)" \
	    --eval "(asdf:oos 'asdf:load-op :beirc)" \
	    --eval "(asdf:oos 'asdf:load-op :climacs)" \
	    --eval "(asdf:oos 'asdf:load-op :climplayer)" \
	    --eval "(asdf:oos 'asdf:load-op :graphic-forms-uitoolkit)" \
	    --eval $quit
	echo "$0 ok"
	;;
    buildsbcl)
        if [ -n "$CCL" ]; then
            echo "Cowardly refusing to build SBCL when \$CCL is set." 1>&2
            exit 1
        fi
	cd ${source_dir}
	cvs -d :pserver:anonymous:@sbcl.cvs.sourceforge.net:/cvsroot/sbcl co sbcl
	# Enable threads
	if test -z "$windowsp"; then
	    echo '(lambda (list) (pushnew :sb-thread list) list)' > sbcl/customize-target-features.lisp
	fi
	(cd sbcl; sh make.sh; SBCL_HOME= INSTALL_ROOT=${target_dir} sh install.sh)
	;;
    lisp)
	shift;
        clbuild_lisp "$@"
        ;;
    sbcl)
        if [ -n "$CCL" ]; then
            echo "Cowardly refusing to run SBCL when \$CCL is set." 1>&2
            exit 1
        fi
	shift;
        clbuild_lisp "$@"
	;;
    openmcl)
        if [ -z "$CCL" ]; then
            echo "Cannot run OpenMCL because \$CCL is not set." 1>&2
            exit 1
        fi
	shift;
        clbuild_lisp "$@"
	;;
    slime)
	shift
	emacs_args="$@"
	emacs=${EMACS-emacs}
	$emacs \
	    -eval "(setq load-path (cons \"${source_namestring}slime\" load-path))" \
	    -eval "(setq inhibit-splash-screen t)" \
	    -eval "(load \"${source_namestring}slime/slime\")" \
	    -eval "(setq inferior-lisp-program \"$self lisp\")" \
	    -eval "(slime-setup)" \
	    -eval '(slime)' \
	    ${emacs_args}
	;;
    listener)
	${lisp} $run_options \
	     --eval "(require :asdf)" \
	     --eval "$set_central_registry" \
	     --eval "$EXTRA_CLIM_FEATURES" \
	     --eval "(asdf:operate 'asdf:load-op :mcclim)" \
	     --eval "(asdf:operate 'asdf:load-op :clim-listener)" \
	     --eval "(clim-listener:run-listener)"
	;;
    gsharp)
	${lisp} \
	     --eval "(require :asdf)" \
	     --eval "$set_central_registry" \
	     --eval "$EXTRA_CLIM_FEATURES" \
	     --eval "(asdf:operate 'asdf:load-op :gsharp)" \
	     --eval "(gsharp::gsharp)"
	;;
    climacs)
        ${lisp} \
	     --eval "(require :asdf)" \
	     --eval "$set_central_registry" \
	     --eval "$EXTRA_CLIM_FEATURES" \
	     --eval "(asdf:operate 'asdf:load-op :climacs)" \
	     --eval "(climacs:climacs)"
	;;
    closure)
	${lisp} \
	     --eval "(require :asdf)" \
	     --eval "$set_central_registry" \
	     --eval "$EXTRA_CLIM_FEATURES" \
	     --eval "(asdf:operate 'asdf:load-op :closure)" \
	     --eval "(closure:start)"
	;;
    beirc)
	${lisp} \
	     --eval "(require :asdf)" \
	     --eval "$set_central_registry" \
	     --eval "$EXTRA_CLIM_FEATURES" \
	     --eval "(asdf:operate 'asdf:load-op :beirc)" \
	     --eval "(beirc:beirc)"
	;;
    climplayer)
	${lisp} \
	     --eval "(require :asdf)" \
	     --eval "$set_central_registry" \
	     --eval "$EXTRA_CLIM_FEATURES" \
	     --eval "(asdf:operate 'asdf:load-op :climplayer)" \
	     --eval "(climplayer:climplayer)"
	;;
    *)
	cat <<EOF
Usage:
  world         download and compile SBCL and the applications afresh
  build         download/update and compile the applications
  buildsbcl     download/update and compile SBCL
  clean         delete all compiled object files
  mrproper      delete all downloaded source and fasl files

  slime         run the Superior Lisp Interaction Mode in a fresh Emacs
  lisp          run Lisp in the terminal
  sbcl          alias for "lisp" (with all packages available to REQUIRE)
  openmcl       alias for "lisp"

  listener      run the McCLIM listener
  gsharp        run the Gsharp score editor 
  climacs       run the Climacs text editor
  closure       run the CLOSURE web browser
                (required Debian packages: gif2png,libjpeg-progs)
  beirc         run the Beirc IRC client
  climplayer    run the CLIMPlayer music player
                (required Debian packages: mplayer, fileschanged, fam)

If you do 'world' or 'buildsbcl' then SBCL will be installed in
target/ and used for future commands. If you don't run these commands
(or you remove target/) then clbuild uses the 'sbcl' in your PATH.

Set CCL to your OpenMCL binary to use OpenMCL instead of SBCL. 
Example: CCL=~/ccl/lx86cl64 ./clbuild build
(Not supported with targets 'buildsbcl' and 'sbcl'.)

Set CLIM_BACKEND=gtkairo to enable clim-gtkairo instead of clim-clx.
(Requires GTK+ >= 2.8.)

EOF
esac
